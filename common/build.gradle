apply plugin: 'com.android.library'
apply from: '../plugin.gradle'

android {
    compileSdkVersion maxApiLevel.toInteger()
    buildToolsVersion androidBuildToolsVersion

    defaultConfig {
        minSdkVersion minApiLevel
        targetSdkVersion maxApiLevel
        versionCode appVersionCode.toInteger()
        versionName appVersionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation kotlin.std
    implementation android.appCompat
    implementation android.corektx
    implementation android.constraint

    implementation common.dagger
    implementation common.daggerAndroid
    implementation common.daggerAnddropidSupport
    kapt common.daggerCompiler
    kapt common.daggerAndroidProccessor
    kapt common.daggerSupport
    kapt android.roomCompiler

    testImplementation test.junit
    testImplementation test.mockito
    testImplementation test.mockitoKotlin
    testImplementation test.robolectric
    androidTestImplementation test.extjunit
    androidTestImplementation test.espresso

    kapt javax.values()
}

detekt {
    toolVersion = "$gradleBuildDetektVersion"
    input = files("src")
    config = files("$rootDir/detekt-config.yml")
    filters = ".*/resources/.*,.*/build/.*"
    reports {
        xml {
            enabled = true
            destination = file("$project.rootDir/build/reports/detekt_report.xml")
        }
        html {
            enabled = true
            destination = file("$project.rootDir/build/reports/detekt_report.html")
        }
    }
}

kotlinter {
    ignoreFailures = false
    experimentalRules = false
}

jacoco {
    toolVersion = "0.8.4"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

project.afterEvaluate {
    //Gather build type and product flavor names in a list
    def buildTypes = android.buildTypes.collect { type -> type.name }
    def productFlavors = android.productFlavors.collect { flavor -> flavor.name }
    if (!productFlavors) productFlavors.add('')

    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->

            //Define the sourceName and the sourcePath.
            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }

            def testTaskName = "test${sourceName.capitalize()}UnitTest"

            task "create${sourceName.capitalize()}UnitTestCoverageReport"(type: JacocoReport, dependsOn: "$testTaskName") {

                group = "Reporting"
                description =
                        "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

                reports {
                    xml.enabled true
                    html.enabled true
                }

                //Directory where the compiled class files are
                classDirectories =
                        fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/${sourcePath}",
                                excludes: ['**/R.class',
                                           '**/BR.class',
                                           // Remove Activity and application as they are dependent to Context
                                           '**/*Activity.class',
                                           '**/net/gahfy/mvvmposts/injection/ViewModelFactory.class',
                                           // Remove View Utils
                                           '**/net/gahfy/mvvmposts/utils/extension/ViewExtension.class',
                                           '**/net/gahfy/mvvmposts/utils/BindingAdapters.class',
                                           '**/R$*.class',
                                           '**/*$ViewInjector*.*',
                                           '**/*$ViewBinder*.*',
                                           '**/BuildConfig.*',
                                           'android/**',
                                           '**/Manifest*.*',
                                           '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
                                           '**/*Module.*', // Modules for Dagger.
                                           '**/*Dagger*.*', // Dagger auto-generated code.
                                           '**/*MembersInjector*.*', // Dagger auto-generated code.
                                           '**/*_Provide*Factory*.*',
                                           '**/*_Factory.*', //Dagger auto-generated code
                                           '**/*$*$*.*' // Anonymous classes generated by kotlin
                                ])

                sourceDirectories = files(["src/main/kotlin",
                                           "src/$productFlavorName/kotlin",
                                           "src/$buildTypeName/kotlin"])

                executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")
            }
        }
    }
}